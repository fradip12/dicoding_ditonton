// Mocks generated by Mockito 5.2.0 from annotations
// in movies/test/presentation/pages/home_movie_widget_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:common/common.dart' as _i6;
import 'package:flutter_bloc/flutter_bloc.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movies/features/movies/domain/entities/movie.dart' as _i7;
import 'package:movies/features/movies/domain/usecases/get_now_playing_movies.dart'
    as _i2;
import 'package:movies/features/movies/domain/usecases/get_popular_movies.dart'
    as _i3;
import 'package:movies/features/movies/domain/usecases/get_top_rated_movies.dart'
    as _i4;
import 'package:movies/features/movies/presentation/bloc/movie/movie_list_bloc/movie_list_bloc.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetNowPlayingMovies_0 extends _i1.Fake
    implements _i2.GetNowPlayingMovies {}

class _FakeGetPopularMovies_1 extends _i1.Fake implements _i3.GetPopularMovies {
}

class _FakeGetTopRatedMovies_2 extends _i1.Fake
    implements _i4.GetTopRatedMovies {}

class _FakeMovieListState_3 extends _i1.Fake implements _i5.MovieListState {}

/// A class which mocks [MovieListBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieListBloc extends _i1.Mock implements _i5.MovieListBloc {
  MockMovieListBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetNowPlayingMovies get getNowPlayingMovies => (super.noSuchMethod(
      Invocation.getter(#getNowPlayingMovies),
      returnValue: _FakeGetNowPlayingMovies_0()) as _i2.GetNowPlayingMovies);
  @override
  _i3.GetPopularMovies get getPopularMovies =>
      (super.noSuchMethod(Invocation.getter(#getPopularMovies),
          returnValue: _FakeGetPopularMovies_1()) as _i3.GetPopularMovies);
  @override
  _i4.GetTopRatedMovies get getTopRatedMovies =>
      (super.noSuchMethod(Invocation.getter(#getTopRatedMovies),
          returnValue: _FakeGetTopRatedMovies_2()) as _i4.GetTopRatedMovies);
  @override
  _i6.RequestState get nowPlayingState =>
      (super.noSuchMethod(Invocation.getter(#nowPlayingState),
          returnValue: _i6.RequestState.empty) as _i6.RequestState);
  @override
  set nowPlayingState(_i6.RequestState? _nowPlayingState) =>
      super.noSuchMethod(Invocation.setter(#nowPlayingState, _nowPlayingState),
          returnValueForMissingStub: null);
  @override
  List<_i7.Movie> get nowPlayingMovies =>
      (super.noSuchMethod(Invocation.getter(#nowPlayingMovies),
          returnValue: <_i7.Movie>[]) as List<_i7.Movie>);
  @override
  set nowPlayingMovies(List<_i7.Movie>? _nowPlayingMovies) => super
      .noSuchMethod(Invocation.setter(#nowPlayingMovies, _nowPlayingMovies),
          returnValueForMissingStub: null);
  @override
  _i6.RequestState get popularState =>
      (super.noSuchMethod(Invocation.getter(#popularState),
          returnValue: _i6.RequestState.empty) as _i6.RequestState);
  @override
  set popularState(_i6.RequestState? _popularState) =>
      super.noSuchMethod(Invocation.setter(#popularState, _popularState),
          returnValueForMissingStub: null);
  @override
  List<_i7.Movie> get popularMovies =>
      (super.noSuchMethod(Invocation.getter(#popularMovies),
          returnValue: <_i7.Movie>[]) as List<_i7.Movie>);
  @override
  set popularMovies(List<_i7.Movie>? _popularMovies) =>
      super.noSuchMethod(Invocation.setter(#popularMovies, _popularMovies),
          returnValueForMissingStub: null);
  @override
  _i6.RequestState get topRatedState =>
      (super.noSuchMethod(Invocation.getter(#topRatedState),
          returnValue: _i6.RequestState.empty) as _i6.RequestState);
  @override
  set topRatedState(_i6.RequestState? _topRatedState) =>
      super.noSuchMethod(Invocation.setter(#topRatedState, _topRatedState),
          returnValueForMissingStub: null);
  @override
  List<_i7.Movie> get topRatedMovies =>
      (super.noSuchMethod(Invocation.getter(#topRatedMovies),
          returnValue: <_i7.Movie>[]) as List<_i7.Movie>);
  @override
  set topRatedMovies(List<_i7.Movie>? _topRatedMovies) =>
      super.noSuchMethod(Invocation.setter(#topRatedMovies, _topRatedMovies),
          returnValueForMissingStub: null);
  @override
  _i5.MovieListState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeMovieListState_3()) as _i5.MovieListState);
  @override
  _i8.Stream<_i5.MovieListState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i5.MovieListState>.empty())
          as _i8.Stream<_i5.MovieListState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i5.MovieListEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i5.MovieListEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i5.MovieListState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i5.MovieListEvent>(
          _i9.EventHandler<E, _i5.MovieListState>? handler,
          {_i9.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i9.Transition<_i5.MovieListEvent, _i5.MovieListState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void onChange(_i9.Change<_i5.MovieListState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
